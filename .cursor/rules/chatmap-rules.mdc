---
description:
globs:
alwaysApply: true
---
# ChatMap Development Rules

## Project Overview
- Building a conversational isochrone mapping application
- Stack: Next.js 14 + TypeScript + Tailwind + Leaflet + Ollama
- Focus: Natural language queries â†’ visual map results + AI explanations

## Code Style & Standards
- Use TypeScript strictly - no any types
- Prefer functional components with hooks
- Use Tailwind CSS for all styling
- Error boundaries and loading states for all async operations
- Mobile-first responsive design

## API Integration Patterns
- All external API calls go through Next.js API routes (/api/*)
- Use proper error handling and fallbacks
- Implement request timeout and retry logic
- Cache responses when appropriate

## File Naming & Structure
- Components: PascalCase (Map.tsx, Chat.tsx)
- API routes: lowercase (route.ts in named folders)
- Types: Descriptive interfaces in types.ts
- Utils: Specific function names in utils.ts

## Key Dependencies
- leaflet, react-leaflet: Map rendering
- @turf/turf: Geospatial calculations
- lucide-react: Icons
- No additional state management - use React state

## External Services
- Ollama: Local LLM on localhost:11434 (llama3.2:3b model)
- OpenRouteService: Isochrone generation (free API key required)
- Overpass API: POI data from OpenStreetMap
- Nominatim: Geocoding addresses to coordinates

## Critical Implementation Notes
- Dynamic import Map component to avoid SSR issues
- Filter POIs using turf.js to ensure they're within isochrone polygon
- Use proper TypeScript interfaces for all API responses
- Implement proper loading states for all async operations
- Mobile responsive - most location queries are mobile

## Performance Considerations
- Limit POI results to 50 per query
- Implement request debouncing for query input
- Use Next.js Image optimization for any images
- Lazy load map components

## Security & Best Practices
- Environment variables for API keys
- Input validation on all API endpoints
- Rate limiting considerations for external APIs
- Proper CORS handling

## Testing Approach
- Focus on critical user flows first
- Test API integrations with proper error scenarios
- Verify mobile responsiveness on various screen sizes
- Test with different query types and edge cases